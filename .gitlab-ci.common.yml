# Copyright (C) 2024 ASTRON (Netherlands Institute for Radio Astronomy)
# SPDX-License-Identifier: GPL-3.0-or-later

workflow:
  rules:
    # don't create a pipeline if its a commit pipeline, on a branch and that branch has open merge requests.
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - when: always

variables:
  GIT_SUBMODULE_STRATEGY: recursive

.failable:
  retry:
    max: 1
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

stages:
  - versioning
  - prepare
  - build
  - linting
  - test
  - publish
  - pages

# The 'IMAGE' variables allow reusing docker images between different pipelines.
# See https://confluence.skatelescope.org/display/SE/Caching+Docker+images+using+GitLab+CI+registry
versioning:
  stage: versioning
  image: bitnami/git
  script:
    # Unshallowing ensures that 'git log' works
    - git fetch --unshallow
    - echo BASE_IMAGE_2004=${CI_REGISTRY_IMAGE}/base_ubuntu20:$(git log -n 1 --pretty=format:%H -- docker/ubuntu_20_04_base) > versions.env
    - echo BASE_IMAGE_2204=${CI_REGISTRY_IMAGE}/base_ubuntu22:$(git log -n 1 --pretty=format:%H -- docker/ubuntu_22_04_base) >> versions.env
    - cat versions.env
  artifacts:
    reports:
      dotenv: versions.env

.prepare:
  extends: [".failable",".dind"]
  stage: prepare
  needs: ["versioning"]
  image: docker:20.10
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - |
      if ! docker manifest inspect $DOCKER_IMAGE > /dev/null || [ "$BUILD_DOCKER_IMAGE" = "1" ]; then
        if [ "$BUILD_DOCKER_IMAGE" = "1" ]; then
          DOCKER_CACHE_PARAMETERS="--no-cache"
        else
          DOCKER_CACHE_PARAMETERS=""
        fi
        docker build $DOCKER_BUILD_ARG ${DOCKER_CACHE_PARAMETERS} --tag $DOCKER_IMAGE -f $DOCKER_FILE .
        docker push $DOCKER_IMAGE
      fi
  # Skip the job if there are no changes to the Docker file. This shortcut only
  # works for push and merge request jobs.
  # A manual pipeline run will thus create missing docker images.
  #
  # This is disabled since the detections of the changes by GitLab seems flaky.
  # TODO(AST-887) Reenable this to test whether it's no longer flaky.
  #
  #rules:
  #  - changes:
  #    - $DOCKER_FILE

# Create and push the base image to the gitlab registry, if it does not exist.
prepare-base-2204:
  extends: .prepare
  variables:
    DOCKER_IMAGE: $BASE_IMAGE_2204
    DOCKER_FILE: ./docker/ubuntu_22_04_base

# Template for jobs that depend on the optional prepare-base job.
.needs-base-2204:
  needs:
    - job: versioning
    - job: prepare-base-2204
      optional: true
  image: $BASE_IMAGE_2204

prepare-2004:
  extends: .prepare
  variables:
    DOCKER_IMAGE: $BASE_IMAGE_2004
    DOCKER_FILE: ./docker/ubuntu_20_04_base

build-2004:
  stage: build
  extends: .failable
  needs:
    - job: versioning
    - job: prepare-2004
      optional: true
  image: $BASE_IMAGE_2004
  script:
    # Build and run DP3
    - mkdir build
    - cd build
    - cmake -G Ninja -DBUILD_TESTING=On -DBUILD_DP3_BENCHMARKS=ON ..
    - ninja install
    - DP3

build-no-idg-2204:
  stage: build
  extends: [".failable",".needs-base-2204"]
  before_script:
    - rm -r /usr/lib/cmake/*idg*
    - rm -r /usr/lib/cmake/*IDGAPITargets*
    - rm -r /usr/lib/*idg*
    - rm -rf /usr/include/idg-*
  script:
    - mkdir build
    - cd build
    - cmake -G Ninja ..
    - ninja

# Build debug has no needs entry because it can have either a base
# image from build-base or build-base-ska which is determined on runtime
build-debug-2204:
  stage: build
  extends: [".failable",".needs-base-2204"]
  script:
    - mkdir build && cd build
    - cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=On -DBUILD_DP3_BENCHMARKS=ON -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage" ..
    - ninja
    - ninja install
  artifacts:
    paths:
      - build

build-2204:
  stage: build
  extends: [".failable",".needs-base-2204"]
  script:
    - mkdir build && cd build
    - cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=On -DBUILD_DP3_BENCHMARKS=ON ..
    - ninja
    - ninja install
  artifacts:
    paths:
      - build

build-doc-2204:
  stage: build
  extends: [".failable",".needs-base-2204"]
  before_script:
    # Install here since pytest and these items aren't compatible
    - pip3 install autosemver jsonschema2rst sphinx sphinx-rtd-theme myst_parser
    - patch -p0 /usr/local/lib/python3.10/dist-packages/jsonschema2rst/parser.py < docs/parser.py.patch
  script:
    - mkdir build && cd build
    - cmake -G Ninja ../docs
    - ninja doc userdoc
  artifacts: # Only for master the docs are published; for branches it may be useful to browse the artifacts
    paths:
    - build/docs

build-package-2204:
  stage: build
  extends: [".failable",".needs-base-2204"]
  script:
    - mkdir dp3_package
    - mkdir build && cd build
    - git fetch --unshallow # We need to unshallow for the tags (setting GIT_DEPTH is not good enough)
    - cmake -DBUILD_PACKAGES=On ..
    - make -j4
    - make package
    - mv $(ls -1 *.deb) ../dp3_package/
  artifacts:
    paths:
    - dp3_package/
  rules:
    # The package is built only during a merge_request_event, a merge to master,
    # or when the pipeline is triggered by a tag event.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_TAG'
    - if: '$UPLOAD_PACKAGE'

linting-2204:
  stage: linting
  extends: [".failable",".needs-base-2204"]
  script:
    - ./scripts/run-format.sh


.unit-test-2204:
  stage: test
  extends: .failable
  needs: ["versioning","build-debug-2204"]
  image: $BASE_IMAGE_2204
  script:
    - cd build
    # The is an issue running cmake with existing build artifacts. This may
    # cause the pytest collection to segfault. Therefore clear the old artifacts
    # before re-running cmake.
    - ninja clean
    - echo configuring with CMake flags $CMAKE_FLAGS and CXX flags $CXX_FLAGS
    - cmake $CMAKE_FLAGS -DCMAKE_CXX_FLAGS="$CXX_FLAGS" .
    - ninja
    - ctest --output-on-failure -j$(nproc) $CTEST_FLAGS |& tee ctest.out
    # Check if ctest found any tests. ctest >= 3.18 has a --no-tests=error
    # option. Older versions require a manual check.
    - if grep -q 'No tests were found' ctest.out; then exit 1; fi
  artifacts:
    paths:
      - build/unittest*.xml
      - build/pytest_*.xml
    reports:
      junit:
        - build/unittest*.xml
        - build/pytest_*.xml

# Common parts for unit test jobs that report coverage.
.unit-test-coverage:
  after_script:
    - cd build
    - mkdir coverage-unit
    # Collect coverage in json, xml and html formats.
    - gcovr -j$(nproc) -r ../ -e '.*/external/.*' -e '_deps/.*' -e '.*/test/.*' -e '.*/CompilerIdCXX/.*' --json run-unit.json --xml coverage.xml --html-details coverage-unit/coverage.html
    # Read json coverage and output in text format.
    - gcovr --add-tracefile run-unit.json
    - tar cfz coverage-unit.tar.gz coverage-unit/
  artifacts:
    paths:
      - build/run-unit.json
      - build/unittest*.xml
      - build/pytest_*.xml
      - build/coverage-unit.tar.gz
    reports:
      junit:
        - build/unittest*.xml
        - build/pytest_*.xml
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml

unit-test-2204:
  extends: [".unit-test-2204", ".unit-test-coverage"]
  variables:
    CMAKE_FLAGS: -DPORTABLE=OFF
    CXX_FLAGS: -coverage
    CTEST_FLAGS: -L unit

unit-test-portable-2204:
  extends: [".unit-test-2204", ".unit-test-coverage"]
  variables:
    CMAKE_FLAGS: -DPORTABLE=ON
    CXX_FLAGS: -coverage
    CTEST_FLAGS: -L unit

unit-test-portable-no-avx2-2204:
  extends: [".unit-test-2204", ".unit-test-coverage"]
  variables:
    CMAKE_FLAGS: -DPORTABLE=ON
    CXX_FLAGS: -mno-avx2 -coverage
    CTEST_FLAGS: -L unit

unit-test-address-sanitizer-2204:
  extends: .unit-test-2204
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
      allow_failure: false
    - when: manual
      allow_failure: true
  variables:
    CMAKE_FLAGS: -DPORTABLE=OFF
    CXX_FLAGS: -fsanitize=address
    # The overhead of the sanitizer causes slow tests to time out.
    CTEST_FLAGS: -L unit -LE slow
    # Ignore the leaks in third-party libraries.
    LSAN_OPTIONS: suppressions=../ci/address_sanitizer_suppressions.txt

unit-test-undefined-behaviour-sanitizer-2204:
  extends: .unit-test-2204
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
      allow_failure: false
    - when: manual
      allow_failure: true
  variables:
    CMAKE_FLAGS: -DPORTABLE=OFF
    # There are NULL pointer issues in Casacore which blocks us from testing in
    # the CI.
    CXX_FLAGS: -fsanitize=undefined -fno-sanitize=null -fno-sanitize-recover
    # The overhead of the sanitizer causes slow tests to time out.
    CTEST_FLAGS: -L unit -LE slow

integration-test-2204:
  stage: test
  extends: .failable
  needs: ["versioning","build-debug-2204"]
  image: $BASE_IMAGE_2204
  script:
    - cd build
    - ninja # Needed when ran on different containers with different timestamps
    - ctest --output-on-failure -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -L integration |& tee ctest.out
    # Check if ctest found any tests. ctest >= 3.18 has a --no-tests=error
    # option. Older versions require a manual check.
    - if grep -q 'No tests were found' ctest.out; then exit 1; fi
    # The json only needs to be built on the SKA repository
    - if [[ $CI_SERVER_HOST != "git.astron.nl" ]] ; then gcovr -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -r ../ -e '.*/external/.*' -e '.*/test/.*' -e '.*/CompilerIdCXX/.*' -e '.*/Common/.*' --json -o run-integration.json; fi
  artifacts:
    paths:
      # This will give a warning and ERROR: No files to upload, which is ok
      - build/run-integration.json
      - build/pytest_*.xml
    reports:
      junit: build/pytest_*.xml

benchmark-2204:
  stage: test
  extends: .failable
  needs: ["versioning","build-2204"]
  image: $BASE_IMAGE_2204
  script:
    - cd build
    # Needed when ran on different containers with different timestamps.
    # The build may fail when compilers differ between containers for unknown
    # reasons. Rebuild everything in that case.
    - if ! ninja; then ninja clean; ninja; fi
    - ctest -V -L benchmark
  artifacts:
    paths:
    - build/benchmarks/*

deploy-package-2204:
  stage: publish
  needs: ["versioning","build-package-2204"]
  image: $BASE_IMAGE_2204
  script:
    - pip3 install aptly-api-client
    - chmod -R 700 external/schaap-packaging
    - cd dp3_package
    - export FILES=$(ls -1 $PWD/*.deb)
    - echo UPLOADING files $FILES
    # The following example command must be executed first or else the update will fail because there is no repository
    # create_repo.py -a amd64 -c testing -d bionic --gpg-key ${GPG_KEY} --gpg-passphrase ${GPG_PASS} schaap
    - ../external/schaap-packaging/update_repo.py --cleanup -d bionic --gpg-key ${GPG_KEY} --gpg-passphrase ${GPG_PASS} schaap ${FILES}
  rules:
    # Only run on master because GPG_KEY and GPG_PASS are protected and therefore only available on protected branches.
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$UPLOAD_PACKAGE'
